)
plot(fit2, which = 1:2)
shiny::runApp('C:/Users/User/Desktop/CLT')
runApp('C:/Users/User/Desktop/CLT')
shiny::runApp('C:/Users/User/Desktop/abc')
runApp('C:/Users/User/Desktop/abc')
df33 <- data.frame(name = c("B", "F", "Rock"),
pop = c(600000, 50000, 1e6),
lat = c(39.292, 39.414, 39.084),
lng = c(-76.607, -77.420, -77.153))
df33 %>% leaflet() %>% addTiles() %>%
addCircles(weight = 0.5, radius  = sqrt(df33$pop)*30) %>%
addRectangles(lat1 = 37.3858, lng1 = -77,
lat2 = 38, lng2 = -79)
library(leaflet)
df33 <- data.frame(name = c("B", "F", "Rock"),
pop = c(600000, 50000, 1e6),
lat = c(39.292, 39.414, 39.084),
lng = c(-76.607, -77.420, -77.153))
df33 %>% leaflet() %>% addTiles() %>%
addCircles(weight = 0.5, radius  = sqrt(df33$pop)*30) %>%
addRectangles(lat1 = 37.3858, lng1 = -77,
lat2 = 38, lng2 = -79)
df33 %>% leaflet() %>% addTiles() %>%
addCircles(weight = 0.5, radius  = sqrt(df33$pop)*30, color = "red") %>%
addRectangles(lat1 = 37.3858, lng1 = -77,
lat2 = 38, lng2 = -79)
df33 %>% leaflet() %>% addTiles() %>%
addCircles(weight = 0.5, radius  = sqrt(df33$pop)*30, color = "red") %>%
addRectangles(lat1 = 37.3858, lng1 = -77,
lat2 = 38, lng2 = -79)  %>%
addLegend(labels = LETTERS[1:3], colors = c("green", "red", "blue"))
df22 <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.7, max = -76.5),
col = sample(c("green", "red", "blue"), 20, replace = T),
stringsAsFactors = F
)
df22 %>% leaflet() %>% addTiles() %>%
addCircleMarkers(color = df$col, clusterOptions = markerClusterOptions()) %>%
addLegend(labels = LETTERS[1:3], colors = c("green", "red", "blue"))
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.7, max = -76.5))
df22 %>% leaflet() %>% addTiles() %>%
addCircleMarkers(color = df$col, clusterOptions = markerClusterOptions()) %>%
addLegend(labels = LETTERS[1:3], colors = c("green", "red", "blue"))
df22 <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.7, max = -76.5),
col = sample(c("green", "red", "blue"), 20, replace = T),
stringsAsFactors = F
)
df22 %>% leaflet() %>% addTiles() %>%
addCircleMarkers(color = df$col, clusterOptions = markerClusterOptions()) %>%
addLegend(labels = LETTERS[1:3], colors = c("green", "red", "blue"))
df33 <- data.frame(name = c("B", "F", "Rock"),
pop = c(600000, 50000, 1e6),
lat = c(39.292, 39.414, 39.084),
lng = c(-76.607, -77.420, -77.153))
df33 %>% leaflet() %>% addTiles() %>%
addCircles(weight = 0.5, radius  = sqrt(df33$pop)*30) %>%
addRectangles(lat1 = 37.3858, lng1 = -77,
lat2 = 38, lng2 = -79)
df33 %>% leaflet() %>% addTiles() %>%
addCircles(weight = 0.5, radius  = sqrt(df33$pop)*30, color = "red") %>%
addRectangles(lat1 = 37.3858, lng1 = -77,
lat2 = 38, lng2 = -79)  %>%
addLegend(labels = LETTERS[1:3], colors = c("green", "red", "blue"))
shiny::runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
df33 %>% leaflet() %>% addTiles() %>%
addCircles(lng = ~ lng, lat = ~lat, weight = 0.5, radius  = df33$pop, color = "red") %>%
addRectangles(lat1 = 37.3858, lng1 = -77,
lat2 = 38, lng2 = -79)  %>%
addLegend(labels = LETTERS[1:3], colors = c("green", "red", "blue"))
df33 %>% leaflet() %>% addTiles() %>%
addCircles(lng = ~ lng, lat = lat, weight = 0.5, radius  = df33$pop, color = "red") %>%
addRectangles(lat1 = 37.3858, lng1 = -77,
lat2 = 38, lng2 = -79)  %>%
addLegend(labels = LETTERS[1:3], colors = c("green", "red", "blue"))
df33 %>% leaflet() %>% addTiles() %>%
addCircles(lng = ~lng, lat = ~lat, weight = 0.5, radius  = df33$pop, color = "red") %>%
addRectangles(lat1 = 37.3858, lng1 = -77,
lat2 = 38, lng2 = -79)  %>%
addLegend(labels = LETTERS[1:3], colors = c("green", "red", "blue"))
df33 %>% leaflet() %>% addTiles() %>%
addCircles(weight = 0.5, radius  = df33$pop, color = "red") %>%
addRectangles(lat1 = 37.3858, lng1 = -77,
lat2 = 38, lng2 = -79)  %>%
addLegend(labels = LETTERS[1:3], colors = c("green", "red", "blue"))
df33 %>% leaflet() %>% addTiles() %>%
addCircles(lng = ~lng, lat = ~lat, weight = 0.5, radius  = df33$pop, color = "red") %>%
addRectangles(lat1 = 37.3858, lng1 = -77,
lat2 = 38, lng2 = -79)  %>%
addLegend(labels = LETTERS[1:3], colors = c("green", "red", "blue"))
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
popouttext <- c("danger1")
df33 <- data.frame(name = c("B", "F", "Rock"),
pop = sqrt(c(600000, 50000, 1e6))*input$bins,
lat = c(39.292, 39.414, 39.084),
lng = c(-76.607, -77.420, -77.153))
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
df33 %>% leaflet() %>% addTiles() %>%
addCircles(lng = ~lng, lat = ~lat, weight = 0.5, radius  = df33$pop, color = "red", fillOpacity = 0.5) %>%
# addMarkers(icon = myicon, popup = popouttext, clusterOptions = markerClusterOptions()) %>%
addRectangles(lat1 = 37.3858, lng1 = -77,
lat2 = 38, lng2 = -79)  %>%
addLegend(labels = LETTERS[1:3], colors = c("green", "red", "blue"))
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
shiny::runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500
),
animationOptions(interval = 1000, loop = FALSE, playButton = NULL,
pauseButton = NULL),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
animationOptions(interval = 1000, loop = FALSE, playButton = NULL,
pauseButton = NULL),
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
interval = 1000
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
interval = 1000
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
animationOptions(interval = 1000)
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
animationOptions(interval = 1)
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
animate = T,
animationOptions(interval = 1)
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
animate = T,
animationOptions(interval = 1)
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
animate = T
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
animate = T, animationOptions(interval = 1, loop = FALSE, playButton = NULL,
pauseButton = NULL)
),
plotOutput("distPlot")
)
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500,
animate = T, animationOptions(interval = 1, loop = FALSE, playButton = NULL,
pauseButton = NULL)
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500, step = 50,
animate = T
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500, step = 1,
animate=animationOptions(interval=300, loop=T)
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500, step = 1,
animate=animationOptions(interval=300, loop=T)
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs), ylim = c(0,100))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
runApp('C:/Users/User/Desktop/Map_ScalingRadius')
shiny::runApp('C:/Users/User/Desktop/population_map/Map_ScalingRadius')
setwd("C:/Users/User/git/sir/cpp")
df <- read.csv("data_SIR.csv")
library(ggplot2)
ggplot(df, aes(x=t, y = S)) + geom_points()
ggplot(df, aes(x=t, y = S)) + geom_point()
head(df)
ggplot(df, aes(x=time, y = S)) + geom_point()
library(reshape2)
df2 <- melt(df)
df2 <- melt(df, id.vars = "time")
df2
df2 <- melt(df, id.vars = "time")
ggplot(df, aes(x=time, y = value, group = variable, color = variable)) + geom_point()
ggplot(df2, aes(x=time, y = value, group = variable, color = variable)) + geom_point()
library(reshape2)
library(ggplot2)
setwd("C:/Users/User/git/sir/cpp")
df <- read.csv("data_sir_deterministic.csv")
df2 <- melt(df, id.vars = "time")
str(df)
ggplot(df2, aes(x=time, y = value, group = variable, color = variable)) + geom_point()
setwd("C:/Users/User/git/sir/cpp")
df <- read.csv("data_sir_deterministic.csv")
df2 <- melt(df, id.vars = "time")
ggplot(df2, aes(x=time, y = value, group = variable, color = variable)) + geom_point()
